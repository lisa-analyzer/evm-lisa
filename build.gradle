/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
	id 'java'
    id 'application'
   	id 'antlr'
   	id 'eclipse'    
   	id 'com.diffplug.spotless' version '6.18.0'
    id 'checkstyle' 
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()   
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
    
   	antlr 'org.antlr:antlr4:4.11.1'
   	
    implementation 'io.github.lisa-analyzer:lisa-program:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-analyses:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-sdk:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-imp:0.1b8'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-no-listener"]
    
        doLast {
    	copy {
      		from 'build/generated-src/antlr/main/'
      		include '*.*'
      		into 'build/generated-src/antlr/main/it/unipr/evm/antlr'
    	}
   		project.delete fileTree('build/generated-src/antlr/main').include('*.*')
  	}
}

checkstyle {
    configFile = file(new File(rootProject.projectDir, 'checkstyle-config.xml'))
    sourceSets = []
    showViolations = true
    toolVersion '8.38' 
}

checkstyleTest.enabled = false

checkstyleMain {
    finalizedBy 'checkstyleErrorMessage'
    reports {
        xml.required = false
        html.required = false
    }
}

task checkstyleErrorMessage {
    onlyIf {
        checkstyleMain.state.failure != null
    }
    doLast {
        logger.error('Checkstyle plugin thrown an error. This means that the javadoc is not correctly setup. Inspect console output to find problematic javadocs.')
        logger.error('To reproduce locally, execute \'./gradlew checkstyleMain\'')
    }
}

spotless {
    enforceCheck = false
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        // tabs, no spaces
        indentWithTabs()
    
        // keep imports clean 
        importOrder() 
        removeUnusedImports()
    
        // use the eclipse formatting with the one provided with the project
        eclipse().configFile(new File(rootProject.projectDir, 'spotless-formatting.xml'))
    
        target 'src/**/*.java'    
        // ignore generated code
        targetExclude '**/build/generated/**/*.java'
        targetExclude '**/build/generated-src/**/*.java'
        targetExclude '**/target/generated-sources/**/*.java'
    }
    antlr4 {
        target 'src/*/antlr/**/*.g4'
        antlr4Formatter() 
    }
}

spotlessJava {
	// declaring explicit dependencies
	dependsOn 'compileJava', 'compileTestJava', 'processTestResources', 'spotlessAntlr4'
}

spotlessJavaCheck { 
    finalizedBy 'spotlessErrorMessage'
}

spotlessAntlr4Check { 
    finalizedBy 'spotlessErrorMessage'
}

task spotlessErrorMessage {
    onlyIf {
        spotlessJavaCheck.state.failure != null || spotlessAntlr4Check.state.failure != null
    }
    doLast {
        logger.error('Spotless plugin thrown an error. This means that the code is not correctly formatted.')
        logger.error('To reproduce locally, execute \'./gradlew spotlessCheck\'')
        logger.error('To automatically fix all the problems, execute \'./gradlew spotlessApply\'')
    }
}
// Imposta la classe con il metodo main
mainClassName = 'it.unipr.analysis.cron.EVMBytecodeTest'

// Task per copiare le classi di test nell'output di produzione
task copyTestClasses(type: Copy) {
    from sourceSets.test.output.classesDirs
    into "$buildDir/classes/java/main"
}

distZip {
    dependsOn copyTestClasses
    from (sourceSets.main.output + sourceSets.test.output)
}

// Aggiungi le classi di test al classpath
run {
    classpath += sourceSets.test.runtimeClasspath
}

tasks.register('checkCodeStyle') {
    group = 'verification'
    description = 'Execute spotless and checkstyle to ensure code and javadoc formatting'
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}